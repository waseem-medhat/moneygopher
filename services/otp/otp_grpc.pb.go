// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: services/otp/otp.proto

package otp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OtpClient is the client API for Otp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OtpClient interface {
	GenerateOTP(ctx context.Context, in *GenerateOtpRequest, opts ...grpc.CallOption) (*OtpResponse, error)
}

type otpClient struct {
	cc grpc.ClientConnInterface
}

func NewOtpClient(cc grpc.ClientConnInterface) OtpClient {
	return &otpClient{cc}
}

func (c *otpClient) GenerateOTP(ctx context.Context, in *GenerateOtpRequest, opts ...grpc.CallOption) (*OtpResponse, error) {
	out := new(OtpResponse)
	err := c.cc.Invoke(ctx, "/Otp/GenerateOTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OtpServer is the server API for Otp service.
// All implementations must embed UnimplementedOtpServer
// for forward compatibility
type OtpServer interface {
	GenerateOTP(context.Context, *GenerateOtpRequest) (*OtpResponse, error)
	mustEmbedUnimplementedOtpServer()
}

// UnimplementedOtpServer must be embedded to have forward compatible implementations.
type UnimplementedOtpServer struct {
}

func (UnimplementedOtpServer) GenerateOTP(context.Context, *GenerateOtpRequest) (*OtpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateOTP not implemented")
}
func (UnimplementedOtpServer) mustEmbedUnimplementedOtpServer() {}

// UnsafeOtpServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OtpServer will
// result in compilation errors.
type UnsafeOtpServer interface {
	mustEmbedUnimplementedOtpServer()
}

func RegisterOtpServer(s grpc.ServiceRegistrar, srv OtpServer) {
	s.RegisterService(&Otp_ServiceDesc, srv)
}

func _Otp_GenerateOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateOtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtpServer).GenerateOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Otp/GenerateOTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtpServer).GenerateOTP(ctx, req.(*GenerateOtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Otp_ServiceDesc is the grpc.ServiceDesc for Otp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Otp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Otp",
	HandlerType: (*OtpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateOTP",
			Handler:    _Otp_GenerateOTP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/otp/otp.proto",
}
