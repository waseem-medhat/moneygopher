// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: accounts.sql

package database

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts ( id, phone_number )
VALUES ( ?, ? )
RETURNING id, phone_number, balance_dollars
`

type CreateAccountParams struct {
	ID          string
	PhoneNumber string
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.ID, arg.PhoneNumber)
	var i Account
	err := row.Scan(&i.ID, &i.PhoneNumber, &i.BalanceDollars)
	return i, err
}

const getAccountByID = `-- name: GetAccountByID :one
SELECT id, phone_number, balance_dollars
FROM accounts
WHERE id = ?
`

func (q *Queries) GetAccountByID(ctx context.Context, id string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByID, id)
	var i Account
	err := row.Scan(&i.ID, &i.PhoneNumber, &i.BalanceDollars)
	return i, err
}
