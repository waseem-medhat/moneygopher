// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: services/otps/otps.proto

package otps

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OtpsClient is the client API for Otps service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OtpsClient interface {
	GenerateOtp(ctx context.Context, in *GenerateOtpRequest, opts ...grpc.CallOption) (*GenerateOtpResponse, error)
	CheckOtp(ctx context.Context, in *CheckOtpRequest, opts ...grpc.CallOption) (*CheckOtpResponse, error)
}

type otpsClient struct {
	cc grpc.ClientConnInterface
}

func NewOtpsClient(cc grpc.ClientConnInterface) OtpsClient {
	return &otpsClient{cc}
}

func (c *otpsClient) GenerateOtp(ctx context.Context, in *GenerateOtpRequest, opts ...grpc.CallOption) (*GenerateOtpResponse, error) {
	out := new(GenerateOtpResponse)
	err := c.cc.Invoke(ctx, "/Otps/GenerateOtp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otpsClient) CheckOtp(ctx context.Context, in *CheckOtpRequest, opts ...grpc.CallOption) (*CheckOtpResponse, error) {
	out := new(CheckOtpResponse)
	err := c.cc.Invoke(ctx, "/Otps/CheckOtp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OtpsServer is the server API for Otps service.
// All implementations must embed UnimplementedOtpsServer
// for forward compatibility
type OtpsServer interface {
	GenerateOtp(context.Context, *GenerateOtpRequest) (*GenerateOtpResponse, error)
	CheckOtp(context.Context, *CheckOtpRequest) (*CheckOtpResponse, error)
	mustEmbedUnimplementedOtpsServer()
}

// UnimplementedOtpsServer must be embedded to have forward compatible implementations.
type UnimplementedOtpsServer struct {
}

func (UnimplementedOtpsServer) GenerateOtp(context.Context, *GenerateOtpRequest) (*GenerateOtpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateOtp not implemented")
}
func (UnimplementedOtpsServer) CheckOtp(context.Context, *CheckOtpRequest) (*CheckOtpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckOtp not implemented")
}
func (UnimplementedOtpsServer) mustEmbedUnimplementedOtpsServer() {}

// UnsafeOtpsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OtpsServer will
// result in compilation errors.
type UnsafeOtpsServer interface {
	mustEmbedUnimplementedOtpsServer()
}

func RegisterOtpsServer(s grpc.ServiceRegistrar, srv OtpsServer) {
	s.RegisterService(&Otps_ServiceDesc, srv)
}

func _Otps_GenerateOtp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateOtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtpsServer).GenerateOtp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Otps/GenerateOtp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtpsServer).GenerateOtp(ctx, req.(*GenerateOtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Otps_CheckOtp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckOtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtpsServer).CheckOtp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Otps/CheckOtp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtpsServer).CheckOtp(ctx, req.(*CheckOtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Otps_ServiceDesc is the grpc.ServiceDesc for Otps service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Otps_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Otps",
	HandlerType: (*OtpsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateOtp",
			Handler:    _Otps_GenerateOtp_Handler,
		},
		{
			MethodName: "CheckOtp",
			Handler:    _Otps_CheckOtp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/otps/otps.proto",
}
